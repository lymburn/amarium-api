swagger: "2.0"
info:
  description: Backend API for Amarium
  version: "1.0.0"
  title: Amarium REST API
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"

# Paths supported by the application
paths:
  /user/:
    post:
      operationId: api.user.create_user
      tags:
        - "User"
      summary: Register a user
      description: Register a user
      parameters:
        - name: user
          in: body
          description: User profile to create
          required: True
          schema:
            type: object
            properties:
              username:
                type: string
                description: The user's username
              password:
                type: string
                description: The user's password
      responses:
        201:
          description: Successfully registered user
        409:
          description: User already exists
  /user/{username}/:
    get:
      operationId: api.user.get_user_by_username
      tags:
        - "User"
      summary: Get a user by username
      description: Get a user by username
      parameters:
        - name: username
          in: path
          description: The user's username
          type: string
          required: True
      responses:
        200:
          description: Successfully retrieved user
        404:
          description: Could not find the user
  /user/{username}/closet/{closet_name}:
    get:
      operationId: api.closet.get_closet
      tags:
        - "Closet"
      summary: Get a user's closet by name
      description: Get a user's closet by name
      parameters:
        - name: username
          in: path
          description: The user's username
          type: string
          required: True
        - name: closet_name
          in: path
          description: Name of the closet
          type: string
          required: True
      responses:
        200:
          description: Successfully retrieved closet
        404:
          description: Could not find the closet
  /user/{username}/closet/:
    post:
      operationId: api.closet.create_closet
      tags:
        - "Closet"
      summary: Create a closet for a user
      description: Create a closet for a user
      parameters:
        - name: username
          in: path
          description: The user's username
          type: string
          required: True
        - name: closet
          in: body
          description: Closet to create
          required: True
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the closet
      responses:
        201:
          description: Successfully created closet
        409:
          description: Closet with name already exist for user
  /closet/{closet_id}/closet-entry/:
    post:
      operationId: api.closet_entry.create_closet_entry
      tags:
        - "Closet Entry"
      summary: Create a new closet entry
      description: Create a new closet entry
      parameters:
        - name: closet_id
          in: path
          description: The closet entry to create an entry in
          type: integer
          required: True
        - name: closet_entry
          in: body
          description: Closet entry to add to closet
          required: True
          schema:
            type: object
            properties:
              base64_encoded_image:
                type: string
                description: Base64 encoded string of byte array of an image
              filename:
                type: string
                description: File name for the image
              category:
                type: string
                description: Clothing category
      responses:
        201:
          description: Successfully created closet entry
        409:
          description: Closet entry with object key already exists
    get:
      operationId: api.closet_entry.get_closet_entries_by_closet
      tags:
        - "Closet Entry"
      summary: Get a closet's entries
      description: Get a closet's entries
      parameters:
        - name: closet_id
          in: path
          description: The closet's id to retrieve entries from
          type: string
          required: True
      responses:
        200:
          description: Successfully retrieved closet entries
  /closet/best-outfit:
    get:
      operationId: api.closet.get_best_outfit
      tags:
        - "Closet"
      summary: Get the best outfit
      description: Get the best outfit
      responses:
        200:
          description: Successfully retrieved best outfit 
        404:
          description: Could not find best outfit

          

